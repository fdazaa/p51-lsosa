Index: web/modules/contrib/quiz/src/Controller/QuizController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/web/modules/contrib/quiz/src/Controller/QuizController.php b/web/modules/contrib/quiz/src/Controller/QuizController.php
--- a/web/modules/contrib/quiz/src/Controller/QuizController.php	(revision c0c2e61e13ca98c504ca1958b21facf87f20c50f)
+++ b/web/modules/contrib/quiz/src/Controller/QuizController.php	(revision cc64cc71ca52e822fe45cf126320c4de02d6dd8e)
@@ -146,7 +146,7 @@
       return $manage_questions;
     }
     else {
-      $form = \Drupal::service('entity.manager')
+      $form = \Drupal::service('entity_type.manager')
         ->getFormObject('quiz', 'default')
         ->setEntity($quiz);
       $form = \Drupal::formBuilder()->getForm($form);
Index: web/modules/contrib/quiz/src/Entity/Quiz.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/web/modules/contrib/quiz/src/Entity/Quiz.php b/web/modules/contrib/quiz/src/Entity/Quiz.php
--- a/web/modules/contrib/quiz/src/Entity/Quiz.php	(revision c0c2e61e13ca98c504ca1958b21facf87f20c50f)
+++ b/web/modules/contrib/quiz/src/Entity/Quiz.php	(revision cc64cc71ca52e822fe45cf126320c4de02d6dd8e)
@@ -196,11 +196,11 @@
         0 => 'No randomization',
         1 => 'Random order',
         2 => 'Random questions',
-        3 => 'Categorized random questions',
+        3 => 'Categorized random questions for TIE'
       ])
-      ->setDescription("<strong>Random order</strong> - all questions display in random order<br>
-<strong>Random questions</strong> - specific number of questions are drawn randomly from this Quiz's pool of questions<br>
-<strong>Categorized random questions</strong> - specific number of questions are drawn from each specified taxonomy term")
+      ->setDescription("
+<strong>Categorized random questions</strong> - specific number of questions are drawn from each specified taxonomy term<br>
+<strong>Aleatorio TIE basado en Matriz del Marco de Procesos</strong> - La sumatoria debe ser igual al numero de preguntas aleatorias<br>")
       ->setDefaultValue(0)
       ->setRequired(TRUE)
       ->setLabel(t('Randomize questions'));
@@ -617,59 +617,320 @@
     return !empty($result);
   }
 
+
   /**
+   * THIS IS FUNCTION FOR BUILD CATEGORIZED TIE
+   *
    * Build a question list for quizzes with categorized random questions.
    *
    * @return array
    *   Array of question information.
    */
+  /*--------------------------------------------------------------*/
   function buildCategorizedQuestionList() {
-    /* @var $terms Drupal\paragraphs\Entity\Paragraph[] */
-    $terms = $this->get('quiz_terms')->referencedEntities();
+
+    $storage=\Drupal::entityTypeManager()->getStorage('group');
+    $query = $storage->getQuery();
+    $ids = $query->execute();
+    $groups =!empty($ids) ? $storage->loadMultiple($ids):[];
+
     $total_questions = [];
-    foreach ($terms as $term) {
-      // Get the term ID referenced on the quiz question pool.
-      $tid = $term->get('quiz_question_tid')->referencedEntities()[0]->id();
-      $query = \Drupal::entityQuery('quiz_question');
+    $questions_alto =[];
+    $questions_medio = [];
+    $questions_bajo = [];
+
+    foreach($groups as $group){
+      //EXTRAE MIEMBROS DEL GRUPO
+      $members = $group->getMembers();
+
+      foreach($members as $member){
+        $id_members = $member->getUser();
+
+        if ($id_members) {  $id_member=$id_members->id();}
+
+
+        //$id_member = $member->getUser()->id(); //EXTRAE ID DE LOS MIEMBROS DEL GRUPO
+        //dpm($id_member);
+        $id_general = \Drupal::currentUser()->id(); //EXTRAER ID DEL USUARIO LOG IN
+        if($id_general == $id_member){
+
+          //Acceso a la matriz de calor
+          $storage_mc = \Drupal::entityTypeManager()->getStorage('node');
+          $query_mc = $storage_mc->getQuery()
+            ->condition('type','matriz_de_calor')
+            ->condition('status',1);
+          $ids_mc =$query_mc->execute();
+          $nodes =  !empty($ids_mc) ? $storage_mc->loadMultiple($ids_mc) : [];
+          //dpm($nodes);
+          foreach ($nodes as $node){
+            //dpm('AQUI');
+            //EXTRAE EL ROL DE LA MATRIZ
+            $field_rol = $node->get('field_rol_del_evaluador')->referencedEntities();
+            foreach($field_rol as $rol_mc){
+              $rol_r= $rol_mc->get('field_rol')->referencedEntities()[0]->id();
+              $rol = \Drupal::currentUser()->getRoles()[1]; //EXTRAE EL ROL DEL USUARIO LOG IN
+              if($rol_r == $rol){
+                $rol_act[0]=1;
+              }else{
+                $rol_act[0]=0;
+              }
+            }
+            $field_te = $node->get('field_tamano_de_empresa')->getValue()[0]['target_id']??NULL;
+            $tamano = $group->get('field_tamano_de_empresa')->getValue()[0]['target_id']??NULL;
+            $field_tpe = $node->get('field_tipo_de_empresa')->getValue()[0]['target_id']??NULL;
+            $tipo = $group->get('field_tipo')->getValue()[0]['target_id']??NULL;
+            if($field_te == $tamano && $field_tpe == $tipo && $rol_act[0]==1){
+
+              $storage=\Drupal::entityTypeManager()->getStorage('quiz');
+              $query = $storage->getQuery();
+              $ids = $query->execute();
+              $quizzes_to =!empty($ids) ? $storage->loadMultiple($ids):[];
+              foreach($quizzes_to as $quizzes){
+                $terms = $quizzes->get('quiz_terms')->referencedEntities();
+                $total_questions = [];
+                $quiz_to = $quizzes->id();
+                $quiz_id = $this -> id();
+                //if($quiz_to == $quiz_id){
+                if($terms != [] && $quiz_to!=[] && $quiz_id !=[] && $quiz_to == $quiz_id){
+                  foreach($terms as $term){
+
+                    $tid = $term->get('quiz_question_tid')->referencedEntities()[0]->id();
+                    $tid_2 = $term->get('quiz_question_tid')->entity;
+                    $clasificacion = $tid_2->get('field_id_estatico_terms')[0]->getString();
+                    //SI CLASIFICACION ES P - CONDICIONAL
+                    if($clasificacion=='P'){
+                      $storage = \Drupal::entityTypeManager()->getStorage('quiz_question');
+                      $query = $storage->getQuery();
+                      $ids = $query->execute();
+                      $questions = !empty($ids) ? $storage->loadMultiple($ids):[];
+                      //BARRE PREGUNTA POR PREGUNTA
+                      foreach($questions as $quiz_question){
+                        $field_clase = $quiz_question->get('field_clasificacion')->entity;
+                        $clase = $field_clase ? $field_clase->get('field_id_estatico_terms')[0]->getString() : NULL;
+                        //TIPO DE PREGUNTA
+                        $field_tipo_q = $quiz_question ? $quiz_question->get('field_tipo')->referencedEntities()[0]->id() : NULL;
+                        //TIPO DE FORMULARIO
+                        $field_tipo_f = $quizzes ? $quizzes->get('field_tipo')->referencedEntities()[0]->id():NULL;
 
-      // Find all taxonomy fields on questions.
-      $fields = \Drupal::service('entity_field.manager')
-        ->getFieldStorageDefinitions('quiz_question');
-      $or = $query->orConditionGroup();
-      foreach ($fields as $field_name => $field) {
-        if ($field->getType() == 'entity_reference' && $field->getSetting('target_type') == 'taxonomy_term') {
-          $or->condition("{$field_name}.target_id", $tid);
-        }
-      }
-      $query->condition($or);
-      $query->condition('status', 1);
-      $query->addTag('quiz_build_categorized_questions');
-      $query->addTag('quiz_random');
-      $query->range(0, $term->get('quiz_question_number')->getString());
-      $question_ids = $query->execute();
-      if (count($question_ids) != $term->get('quiz_question_number')->getString()) {
-        // Didn't find enough questions in this category.
-        return [];
-      }
+                        //REVISA SI LA CLASE DE LA PREGUNTA ES P
+                        if($clase=='P' && $field_tipo_q == $field_tipo_f){
+                          //dpm('INGRESA');
+                          $filed_catp = $quiz_question->get('field_categoria_proceso')->getValue();
+                          $categoria_q = $filed_catp[0]['target_id']?? NULL;
+                          $proceso_q = $filed_catp[1]['target_id']?? NULL;
+                          $field_value = $node->get('field_categoria_proceso_y_critic')->referencedEntities();
+                          foreach($field_value as $paragraph){
+                            $sub_field_value = $paragraph->get('field_categoria_proceso')->getValue();
+                            $categoria_mc = $sub_field_value[0]['target_id']?? NULL;
+                            $proceso_mc = $sub_field_value[1]['target_id']?? NULL;
+                            if($categoria_q==$categoria_mc && $proceso_mc==$proceso_q){
+                              $field_criticidad = $paragraph->get('field_criticidad')->entity;
+                              $criticidad = $field_criticidad->get('field_id_estatico')->getString();
+                              if($criticidad == 'ALTO'){
+                                $questions_alto[] = [
+                                  'qqid'=>$quiz_question->get('qqid')->value,
+                                  'tid'=>$tid,
+                                  'type'=>$quiz_question->bundle(),
+                                  'vid'=>$quiz_question->getRevisionId()
+                                ];
+                              }
+                              elseif($criticidad=='MEDIO'){
+                                $questions_medio[] = [
+                                  'qqid'=>$quiz_question->get('qqid')->value,
+                                  'tid'=>$tid,
+                                  'type'=>$quiz_question->bundle(),
+                                  'vid'=>$quiz_question->getRevisionId()
+                                ];
+                              }
+                              elseif($criticidad=='BAJO'){
+                                $questions_bajo[] = [
+                                  'qqid'=>$quiz_question->get('qqid')->value,
+                                  'tid'=>$tid,
+                                  'type'=>$quiz_question->bundle(),
+                                  'vid'=>$quiz_question->getRevisionId()
+                                ];
+                              }
+                            }
+                          }
+                        }
+                      }
+
+                      $questions_numbers_p = $term->get('quiz_question_number')[0]->value;
+                      $tamano_alto = sizeof($questions_alto);
+                      $tamano_medio = sizeof($questions_medio);
+                      $tamano_bajo = sizeof($questions_bajo);
+
+                      if($tamano_alto<$questions_numbers_p){
+
+                        $diff_ap = $questions_numbers_p - $tamano_alto;
+                        //LLENA EL ARRAY CON PREGUNTAS DE ALTO
+                        if($tamano_alto==1){
+                          $total_questions[]=$questions_alto[0];
+                        }
+                        else{
+                          $key = array_rand($questions_alto, $tamano_alto);
+                          foreach($key as $paso){
+                            $total_questions[]=$questions_alto[$paso];
+                          }
+                        }
+
+                        if($tamano_medio<$diff_ap){
+                          $diff_mp = $diff_ap - $tamano_medio;
+                          //LLENA ELK ARRAY CON PREGUNTAS EN MEDIO
+                          if($tamano_medio==1){
+                            $total_questions[]=$questions_medio[0];
+                          }
+                          else{
+                            $key_m = array_rand($questions_medio, $tamano_medio);
+                            if($diff_ap == 1){
+                              $total_questions[]=$questions_medio[$key_m];
+                            }else{
+                              foreach($key_m as $paso){
+                                $total_questions[]=$questions_medio[$paso];
+                              }
+                            }
+                          }
+
+                          if($tamano_bajo<$diff_mp){
+                            return[];
+                          }else{
+                            //LLENA EL ARRAY CON PREGUNTAS EN BAJO
+                            if($tamano_bajo==1){
+                              $total_questions[]=$questions_bajo[0];
+                            }
+                            else{
+                              $key_b = array_rand($questions_bajo, $diff_mp);
+                              if($diff_mp == 1){
+                                $total_questions[]=$questions_bajo[$key_b];
+                              }else{
+                                foreach($key_b as $paso){
+                                  $total_questions[]=$questions_bajo[$paso];
+                                }
+                              }
+                            }
+                          }
+
+                        }else{
+                          //LLENA EL ARRAY DE SALIDA CON PREGUNTAS EN MEDIO SI NO REQUIERE DE PREGUNTAS EN BAJO
+                          if($tamano_medio==1){
+                            $total_questions[]=$questions_medio[0];
+                          }
+                          else{
+                            $key_m = array_rand($questions_medio, $diff_ap);
+                            if($diff_ap == 1){
+                              $total_questions[]=$questions_medio[$key_m];
+                            }else{
+                              foreach($key_m as $paso){
+                                $total_questions[]=$questions_medio[$paso];
+                              }
+                            }
+                          }
+                        }
+                      }else{
+                        //LLENA EL ARRAY DE SALIDA CON SOLO PREGUNTAS EN ALTO SI NO REQUIERE PREGUNTAS NI EN MEDIO NI EN BAJO
+                        if($tamano_alto==1){
+                          $total_questions[]=$questions_alto[0];
+                        }
+                        else{
 
-      $found_questions = QuizQuestion::loadMultiple($question_ids);
 
-      foreach ($found_questions as $qqid => $question) {
-        $total_questions[] = [
-          'qqid' => $qqid,
-          'tid' => $tid,
-          'type' => $question->bundle(),
-          'vid' => $question->getRevisionId(),
-        ];
-      }
-    }
+                          $key = array_rand($questions_alto, $questions_numbers_p);
+                          foreach($key as $paso){
+                            $total_questions[]=$questions_alto[$paso];
+                          }
+                        }
+
+                      }
+
+                      //TERMINA CONDICIONALES PARA PREGUNTAS TIPO P
+
+                    }
+                    elseif($clasificacion=='TC'){
+                      $storage = \Drupal::entityTypeManager()->getStorage('quiz_question');
+                      $query = $storage->getQuery();
+                      $ids = $query->execute();
+                      $questions = !empty($ids) ? $storage->loadMultiple($ids):[];
+                      //BARRE PREGUNTA POR PREGUNTA
+                      foreach($questions as $quiz_question){
+                        $field_clase = $quiz_question->get('field_clasificacion')->entity;
+                        $clase = $field_clase ? $field_clase->get('field_id_estatico_terms')[0]->getString() : NULL;
+                        ///TIPO DE PREGUNTA
+                        $field_tipo_q = $quiz_question ? $quiz_question->get('field_tipo')->referencedEntities()[0]->id() : NULL;
+                        //TIPO DE FORMULARIO
+                        $field_tipo_f = $quizzes ? $quizzes->get('field_tipo')->referencedEntities()[0]->id():NULL;
+                        //REVISA SI LA CLASE DE LAS PREGUNTAS
+                        if($clase=='TC'&& $field_tipo_q == $field_tipo_f){
+                          //dpm('Ingresa TC');
+                          $questions_tc[] = [
+                            'qqid'=>$quiz_question->get('qqid')->value,
+                            'tid'=>$tid,
+                            'type'=>$quiz_question->bundle(),
+                            'vid'=>$quiz_question->getRevisionId()
+                          ];
+                        }
+                      }
+                      $questions_numbers_p = $term->get('quiz_question_number')[0]->value;
+                      $key= array_rand($questions_tc, $questions_numbers_p);
+                      if($questions_numbers_p==1){
+                        $total_questions[]=$questions_tc[$key];
+                      }else{
+                        foreach($key as $paso){
+                          $total_questions[]=$questions_tc[$paso];
+                        }
+                      }
+                    }
+                    elseif($clasificacion=='TMP'){
+
+                      $storage = \Drupal::entityTypeManager()->getStorage('quiz_question');
+                      $query = $storage->getQuery();
+                      $ids = $query->execute();
+                      $questions = !empty($ids) ? $storage->loadMultiple($ids):[];
+                      //BARRE PREGUNTA POR PREGUNTA
+                      foreach($questions as $quiz_question){
+                        $field_clase = $quiz_question->get('field_clasificacion')->entity;
+                        $clase = $field_clase ? $field_clase->get('field_id_estatico_terms')[0]->getString() : NULL;
+                        ///TIPO DE PREGUNTA
+                        $field_tipo_q = $quiz_question ? $quiz_question->get('field_tipo')->referencedEntities()[0]->id() : NULL;
+                        //TIPO DE FORMULARIO
+                        $field_tipo_f = $quizzes ? $quizzes->get('field_tipo')->referencedEntities()[0]->id():NULL;
+                        //REVISA SI LA CLASE DE LAS PREGUNTAS
+                        if($clase=='TMP' && $field_tipo_q == $field_tipo_f){
+                          //dpm('Ingresa TMP');
+                          $questions_tmp[] = [
+                            'qqid'=>$quiz_question->get('qqid')->value,
+                            'tid'=>$tid,
+                            'type'=>$quiz_question->bundle(),
+                            'vid'=>$quiz_question->getRevisionId()
+                          ];
+                        }
+                      }
+                      $questions_numbers_p = $term->get('quiz_question_number')[0]->value;
+                      $key= array_rand($questions_tmp, $questions_numbers_p);
+                      if($questions_numbers_p==1){
+                        $total_questions[]=$questions_tmp[$key];
+                      }else{
+                        foreach($key as $paso){
+                          $total_questions[]=$questions_tmp[$paso];
+                        }
+                      }
 
+                    }
 
-    // Optionally shuffle all categories together?
-    //shuffle($total_questions);
+                  }
+                  break 4;
+
+                }
+              }
+            }
+          }
+        }
+      }
+    }
 
     return $total_questions;
+
   }
+
 
   /**
    * Get the number of required questions for a quiz.
@@ -876,5 +1137,4 @@
     ])->fetchField();
     return ($passed > 0);
   }
-
 }
